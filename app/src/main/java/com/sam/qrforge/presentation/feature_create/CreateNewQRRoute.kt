package com.sam.qrforge.presentation.feature_create

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.getValue
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.lifecycle.compose.dropUnlessResumed
import androidx.navigation.NavController
import androidx.navigation.NavGraphBuilder
import androidx.navigation.navigation
import com.sam.qrforge.presentation.common.composables.UIEventsSideEffect
import com.sam.qrforge.presentation.common.utils.LocalSharedTransitionVisibilityScopeProvider
import com.sam.qrforge.presentation.feature_create.screens.CreateQRScreen
import com.sam.qrforge.presentation.feature_create.screens.GeneratedQRScreen
import com.sam.qrforge.presentation.navigation.nav_graph.NavRoutes
import com.sam.qrforge.presentation.navigation.animatedComposable
import com.sam.qrforge.presentation.navigation.nav_graph.CreateNewQRNavGraph
import org.koin.compose.viewmodel.sharedKoinViewModel

fun NavGraphBuilder.createNewQRRoute(controller: NavController) = navigation<NavRoutes.CreateRoute>(
	startDestination = CreateNewQRNavGraph.CreateNewQRRoute
) {
	animatedComposable<CreateNewQRNavGraph.CreateNewQRRoute> { backStack ->

		val viewModel = backStack.sharedKoinViewModel<CreateNewQRViewModel>(controller)
		val isContentValid by viewModel.isContentValid.collectAsStateWithLifecycle()
		val currentContent by viewModel.qrContent.collectAsStateWithLifecycle()

		UIEventsSideEffect(events = viewModel::uiEvents)

		CompositionLocalProvider(LocalSharedTransitionVisibilityScopeProvider provides this) {
			CreateQRScreen(
				content = currentContent,
				isContentValid = isContentValid,
				onEvent = viewModel::onEvents,
				onGenerateQR = dropUnlessResumed {
					controller.navigate(CreateNewQRNavGraph.PreviewGeneratedQRRoute)
				},
				navigation = {
					if (controller.previousBackStackEntry != null)
						IconButton(onClick = dropUnlessResumed { controller.popBackStack() }) {
							Icon(
								imageVector = Icons.AutoMirrored.Filled.ArrowBack,
								contentDescription = "Back Arrow"
							)
						}
				},
			)
		}
	}

	animatedComposable<CreateNewQRNavGraph.PreviewGeneratedQRRoute> { backStack ->

		val viewModel = backStack.sharedKoinViewModel<CreateNewQRViewModel>(controller)
		val generated by viewModel.generated.collectAsStateWithLifecycle()

		CompositionLocalProvider(LocalSharedTransitionVisibilityScopeProvider provides this) {
			GeneratedQRScreen(
				generated = generated,
				onEvent = viewModel::onEvents,
				navigation = {
					if (controller.previousBackStackEntry != null)
						IconButton(onClick = dropUnlessResumed { controller.popBackStack() }) {
							Icon(
								imageVector = Icons.AutoMirrored.Filled.ArrowBack,
								contentDescription = "Back Arrow"
							)
						}
				},
			)
		}
	}
}